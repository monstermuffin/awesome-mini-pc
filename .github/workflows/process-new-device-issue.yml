name: Process New Device Issue

on:
  issues:
    types:
      - labeled

jobs:
  create_device_yaml:
    if: github.event.label.name == 'new-device'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install js-yaml
          npm install

      - name: Parse Issue Form and Create YAML
        id: parse_issue
        uses: actions/github-script@v7
        with:
          script: |
            const yaml = require('js-yaml');
            const validateData = require('./scripts/validate-data.cjs');
            
            async function createPR() {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const issueBody = issue.data.body;
              if (!issueBody) {
                throw new Error('Issue body is empty');
              }

              // Parse the issue form
              const lines = issueBody.split('\n');
              const data = {};
              
              // Field mapping from form fields to YAML fields
              const fieldMapping = {
                'Device ID': 'id',
                'Brand': 'brand',
                'Model': 'model',
                'Release Date': 'release_date',
                'CPU Brand': 'cpu_brand',
                'CPU Model': 'cpu_model',
                'CPU TDP (Watts)': 'cpu_tdp',
                'CPU Cores': 'cpu_cores',
                'CPU Threads': 'cpu_threads',
                'Base Clock (GHz)': 'base_clock',
                'Boost Clock (GHz)': 'boost_clock',
                'CPU Architecture': 'cpu_architecture',
                'CPU Socket Type': 'cpu_socket_type',
                'GPU Models': 'gpu_models',
                'Memory Type': 'memory_type',
                'Memory Module Type': 'memory_module_type',
                'Memory Slots': 'memory_slots',
                'Maximum Memory Capacity (GB)': 'max_capacity',
                'Memory Speed (MHz)': 'memory_speed',
                'Storage Details': 'storage_details',
                'WiFi Standard': 'wifi_standard',
                'WiFi Chipset': 'wifi_chipset',
                'Bluetooth Version': 'bluetooth_version',
                'Ethernet Ports': 'ethernet_ports',
                'PCIe Slots': 'pcie_slots',
                'OCuLink Ports': 'oculink_ports',
                'USB Ports': 'usb_ports',
                'Display Ports': 'display_ports',
                'Audio Jacks': 'audio_jacks',
                'SD Card Reader': 'sd_card_reader',
                'Dimensions (mm)': 'dimensions',
                'Power Adapter': 'power_adapter',
                'Additional Information': 'additional_info'
              };

              let currentField = null;
              let currentValue = [];

              // Process each line
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                
                // Skip empty lines and confirmation section
                if (!line || line === 'Description' || line === 'Submission Confirmation') {
                  continue;
                }

                // Check if this is a field header
                if (line.startsWith('### ')) {
                  // Save previous field if exists
                  if (currentField && currentValue.length > 0) {
                    const fieldName = fieldMapping[currentField];
                    if (fieldName) {
                      data[fieldName] = currentValue.join('\n').trim();
                    }
                  }
                  
                  // Start new field
                  currentField = line.substring(4);
                  currentValue = [];
                  continue;
                }

                // Skip "No response" values
                if (line === '_No response_') {
                  continue;
                }

                // If we have a current field and this isn't a checkbox line, add to value
                if (currentField && !line.startsWith('- [x]')) {
                  currentValue.push(line);
                }
              }
              
              // Save last field
              if (currentField && currentValue.length > 0) {
                const fieldName = fieldMapping[currentField];
                if (fieldName) {
                  data[fieldName] = currentValue.join('\n').trim();
                }
              }

              // Create validation structure
              const validationData = {
                id: `${data.brand.toLowerCase()}-${data.id.toLowerCase()}`,
                brand: data.brand,
                model: data.model,
                release_date: data.release_date,

                cpu: {
                  brand: data.cpu_brand,
                  model: data.cpu_model,
                  tdp: parseInt(data.cpu_tdp),
                  cores: parseInt(data.cpu_cores),
                  threads: parseInt(data.cpu_threads),
                  base_clock: parseFloat(data.base_clock),
                  boost_clock: parseFloat(data.boost_clock),
                  architecture: data.cpu_architecture
                }
              };

              // Add CPU socket if specified
              if (data.cpu_socket_type && data.cpu_socket_type !== 'None') {
                validationData.cpu.socket = {
                  type: data.cpu_socket_type,
                  supports_cpu_swap: true
                };
              }

              // Parse GPU models
              if (data.gpu_models) {
                validationData.gpu = data.gpu_models.split('\n')
                  .filter(line => line.trim().startsWith('Type:'))
                  .map(line => {
                    const parts = line.split(',').map(p => p.trim());
                    const gpu = {};
                    parts.forEach(part => {
                      const [key, value] = part.split(':').map(s => s.trim());
                      if (key.toLowerCase() === 'type') gpu.type = value;
                      if (key.toLowerCase() === 'model') gpu.model = value;
                      if (key.toLowerCase() === 'vram') gpu.vram = value;
                    });
                    return gpu;
                  });
              }

              // Memory configuration
              validationData.memory = {
                slots: parseInt(data.memory_slots),
                type: data.memory_type,
                speed: parseInt(data.memory_speed),
                module_type: data.memory_module_type,
                max_capacity: parseInt(data.max_capacity)
              };

              // Parse storage details
              if (data.storage_details) {
                validationData.storage = data.storage_details.split('\n')
                  .filter(line => line.trim().startsWith('Type:'))
                  .map(line => {
                    const parts = line.split(',').map(p => p.trim());
                    const storage = {};
                    parts.forEach(part => {
                      const [key, value] = part.split(':').map(s => s.trim());
                      const key_lower = key.toLowerCase();
                      if (key_lower === 'type') storage.type = value;
                      if (key_lower === 'form factor') storage.form_factor = value;
                      if (key_lower === 'interface') storage.interface = value;
                    });
                    return storage;
                  });
              }

              // Networking configuration
              validationData.networking = {
                ethernet: data.ethernet_ports ? data.ethernet_ports.split('\n')
                  .filter(line => line.trim().startsWith('Type:'))
                  .map(line => {
                    const parts = line.split(',').map(p => p.trim());
                    const eth = {};
                    parts.forEach(part => {
                      const [key, value] = part.split(':').map(s => s.trim());
                      const key_lower = key.toLowerCase();
                      if (key_lower === 'type') eth.speed = value;
                      if (key_lower === 'chipset') eth.chipset = value;
                      if (key_lower === 'interface') eth.interface = value;
                    });
                    eth.ports = 1; // Default to 1 port per entry
                    return eth;
                  }) : [],
                wifi: data.wifi_standard ? {
                  chipset: data.wifi_chipset,
                  standard: data.wifi_standard,
                  bluetooth: data.bluetooth_version
                } : undefined
              };

              // Ports configuration
              validationData.ports = {};

              // USB ports
              if (data.usb_ports) {
                const usb_a = [];
                const usb_c = [];

                data.usb_ports.split('\n')
                  .filter(line => line.trim().startsWith('Type:'))
                  .forEach(line => {
                    const parts = line.split(',').map(p => p.trim());
                    const port = {};
                    parts.forEach(part => {
                      const [key, value] = part.split(':').map(s => s.trim());
                      const key_lower = key.toLowerCase();
                      if (key_lower === 'type') port.type = value;
                      if (key_lower === 'speed') port.speed = value;
                      if (key_lower === 'count') port.count = parseInt(value);
                      if (key_lower === 'alt mode') port.alt_mode = value;
                      if (key_lower === 'max resolution') port.max_resolution = value;
                      if (key_lower === 'thunderbolt') port.thunderbolt_version = value;
                    });

                    // Determine if it's USB-A or USB-C based on the type
                    if (port.type.toLowerCase().includes('usb4') || port.type.toLowerCase().includes('type-c')) {
                      usb_c.push(port);
                    } else {
                      usb_a.push(port);
                    }
                  });

                if (usb_a.length > 0) validationData.ports.usb_a = usb_a;
                if (usb_c.length > 0) validationData.ports.usb_c = usb_c;
              }

              // Display ports
              if (data.display_ports) {
                const display_ports = data.display_ports.split('\n')
                  .filter(line => line.includes('Version:') || line.includes('Count:'))
                  .map(line => {
                    const parts = line.split(',').map(p => p.trim());
                    const port = {};
                    parts.forEach(part => {
                      const [key, value] = part.split(':').map(s => s.trim());
                      const key_lower = key.toLowerCase();
                      if (key_lower === 'count') port.count = parseInt(value);
                      if (key_lower === 'version') port.version = value;
                      if (key_lower === 'form factor') port.form_factor = value;
                      if (key_lower === 'max resolution') port.max_resolution = value;
                    });
                    return port;
                  });

                // Split into HDMI and DisplayPort based on the first word
                const hdmi = display_ports.filter(p => p.type?.toLowerCase().includes('hdmi'));
                const dp = display_ports.filter(p => !p.type?.toLowerCase().includes('hdmi'));

                if (hdmi.length > 0) validationData.ports.hdmi = hdmi[0];
                if (dp.length > 0) validationData.ports.displayport = dp[0];
              }

              // Audio and SD card reader
              if (data.audio_jacks) {
                validationData.ports.audio_jack = parseInt(data.audio_jacks);
              }

              if (data.sd_card_reader) {
                validationData.ports.sd_card_reader = data.sd_card_reader === 'Yes';
              }

              // Physical specifications
              if (data.dimensions) {
                const [width, depth, height] = data.dimensions.split('x').map(d => parseInt(d.trim()));
                validationData.dimensions = {
                  width,
                  depth,
                  height
                };
              }

              // Power adapter
              if (data.power_adapter) {
                const match = data.power_adapter.match(/(\d+)W.*?(\d+)v.*?(\d+)A/i);
                if (match) {
                  validationData.power = {
                    adapter_wattage: parseInt(match[1]),
                    dc_input: `${match[2]}V/${match[3]}A`
                  };
                } else {
                  validationData.power = {
                    adapter_wattage: parseInt(data.power_adapter)
                  };
                }
              }

              // Before creating the file, validate the data
              const validationErrors = [];
              validateData.validateRequiredFields(validationData, '', validationErrors, `${data.brand}/${data.id}.yaml`);
              validateData.validateFieldValues(validationData, '', validationErrors, `${data.brand}/${data.id}.yaml`);

              if (validationErrors.length > 0) {
                // Format validation errors for the comment
                const errorMessages = validationErrors
                  .map(err => `- ${err.message} (${err.path})${err.critical ? ' [CRITICAL]' : ''}`)
                  .join('\n');

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `### Validation Errors Found\n\nThe following errors were found in your device submission:\n\n${errorMessages}\n\nPlease fix these issues and update your submission. The automation will try again when you update the issue.`
                });

                // Remove the label to allow for retrying
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'new-device'
                });

                throw new Error('Validation failed');
              }

              const yamlString = yaml.dump(validationData, { indent: 2, skipInvalid: true });
              
              // Use the GitHub API to create/update the file
              const brand = data.brand.toLowerCase();
              const filePath = `data/devices/${brand}/${data.id}.yaml`;
              const branchName = `new-device/${data.id}`;

              // Get the current main branch SHA
              const mainRef = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/main'
              });

              // Create a new branch from main
              try {
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${branchName}`,
                  sha: mainRef.data.object.sha
                });
              } catch (error) {
                if (error.status !== 422) { // 422 means branch already exists
                  throw error;
                }
              }

              // Create the file in the new branch
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                message: `Add device data for ${data.brand} ${data.model}`,
                content: Buffer.from(yamlString).toString('base64'),
                branch: branchName
              });
              
              // Create PR
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Add Device: ${data.brand} ${data.model}`,
                body: `Adds data for **${data.brand} ${data.model}** based on issue #${context.issue.number}.\n\nCloses #${context.issue.number}`,
                head: branchName,
                base: 'main'
              });
              
              // Add labels to PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['new-device', 'automated-pr']
              });
              
              // Comment on the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `Thank you for your submission! A Pull Request has been created: #${pr.data.number}`
              });
            }
            
            // Run the PR creation
            await createPR(); 