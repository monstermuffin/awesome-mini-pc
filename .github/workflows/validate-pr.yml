name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check_changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    outputs:
      device_changes: ${{ steps.filter.outputs.device_changes }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            device_changes:
              - 'data/devices/**'

  validate_data:
    name: Validate Device Data
    needs: check_changes
    if: needs.check_changes.outputs.device_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate data
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              const output = execSync('node scripts/validate-data.cjs', { encoding: 'utf8' });
              console.log('Validation output:', output);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '‚úÖ Data validation passed! All device files are correctly formatted.\n\nThis PR is now ready for manual review and merge.'
              });

              const issueMatch = context.payload.pull_request.body.match(/#(\d+)/);
              if (issueMatch) {
                const issueNumber = parseInt(issueMatch[1]);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `### ‚úÖ Validation Successful! \n\nYour device submission has passed all validation checks in PR #${context.payload.pull_request.number}.\n\nChanges will be reviewed and merged into the database.`
                });
              }
              
            } catch (error) {
              const errorOutput = error.stdout || error.stderr;
              console.error('Validation failed:', errorOutput);
              
              let errorMessage = '‚ùå Data validation failed!\n\n';
              
              try {
                const errors = JSON.parse(errorOutput);
                
                const deviceErrors = {};
                errors.forEach(err => {
                  if (!deviceErrors[err.deviceId]) {
                    deviceErrors[err.deviceId] = [];
                  }
                  deviceErrors[err.deviceId].push(err);
                });
                
                for (const [deviceId, errs] of Object.entries(deviceErrors)) {
                  errorMessage += `### Device: ${deviceId}\n`;
                  errorMessage += '| Error Type | Message | Path |\n';
                  errorMessage += '|------------|---------|------|\n';
                  
                  errs.forEach(err => {
                    const severity = err.critical ? 'üî¥ Critical' : '‚ö†Ô∏è Warning';
                    errorMessage += `| ${severity} | ${err.message} | \`${err.path}\` |\n`;
                  });
                  errorMessage += '\n';
                }
                
                errorMessage += '\n### How to Fix\n';
                errorMessage += '1. Review the errors above\n';
                errorMessage += '2. Edit your original issue to fix the reported problems\n';
                errorMessage += '3. The automation will automatically create a new PR with your changes\n\n';
                errorMessage += '### Common Fixes\n';
                errorMessage += '- Make sure all required fields are present\n';
                errorMessage += '- Check that values match the allowed options (e.g., CPU brands, memory types)\n';
                errorMessage += '- Verify the format of numeric values (e.g., memory capacity, CPU speeds)\n';
                errorMessage += '- Ensure arrays (storage, GPU, etc.) are properly formatted\n';
                
              } catch (parseError) {
                errorMessage += '```\n' + errorOutput + '\n```\n';
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: errorMessage
              });

              const issueMatch = context.payload.pull_request.body.match(/#(\d+)/);
              if (issueMatch) {
                const issueNumber = parseInt(issueMatch[1]);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `### Validation Failed in PR #${context.payload.pull_request.number}\n\n${errorMessage}\n\nPlease edit your issue with the corrections. A new PR will be created automatically with your changes.`
                });
              }

              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                state: 'closed'
              });

              const branchName = context.payload.pull_request.head.ref;
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
              
              core.setFailed('Data validation failed');
            } 