name: Close Device Issue

on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'data/devices/**'

jobs:
  close_issue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      
    steps:
      - name: Generate App Token
        if: github.event.pull_request.merged == true
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Close linked issue
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const issueMatch = context.payload.pull_request.body.match(/#(\d+)/);
            if (issueMatch) {
              const issueNumber = parseInt(issueMatch[1]);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `ðŸŽ‰ Your device submission has been merged!\n\n` +
                      `The device data has been added the database and will be visible on the website after the next deployment.\n\n` +
                      `Thank you for contributing to the Awesome Mini PC database.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
            } 

      - name: Delete source branch
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const branchName = context.payload.pull_request.head.ref;
            if (branchName !== 'main' && branchName !== 'master') {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                console.log(`Successfully deleted branch ${branchName}`);
              } catch (error) {
                console.error(`Failed to delete branch ${branchName}:`, error.message);
              }
            } else {
              console.log(`Branch ${branchName} is a protected branch and will not be deleted.`);
            } 